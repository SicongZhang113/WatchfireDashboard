{"ast":null,"code":"import styled, { keyframes, css, ThemeProvider } from 'styled-components';\nimport React from 'react';\nvar DEFAULT_THEME = {\n  mainColor: 'white',\n  scrollerBackgroundColor: 'rgba(255, 255, 255, 0.15)',\n  labelFontSize: 12\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nvar _templateObject = taggedTemplateLiteral(['\\n  to {\\n    transform: translateX(', 'px);\\n  }\\n'], ['\\n  to {\\n    transform: translateX(', 'px);\\n  }\\n']),\n    _templateObject2 = taggedTemplateLiteral(['\\n  animation: ', ' 1s ease-in-out forwards;\\n'], ['\\n  animation: ', ' 1s ease-in-out forwards;\\n']);\n\nvar barAnimation = function barAnimation(props) {\n  return keyframes(_templateObject, props.offset);\n};\n\nvar animationStyle = css(_templateObject2, barAnimation);\n\nvar _templateObject$1 = taggedTemplateLiteral(['\\n  position: relative;\\n  height: 20px;\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n'], ['\\n  position: relative;\\n  height: 20px;\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n']),\n    _templateObject2$1 = taggedTemplateLiteral(['\\n  position: absolute;\\n  width: 100%;\\n  height: 6px;\\n  background-color: ', ';\\n'], ['\\n  position: absolute;\\n  width: 100%;\\n  height: 6px;\\n  background-color: ', ';\\n']),\n    _templateObject3 = taggedTemplateLiteral(['\\n  cursor: pointer;\\n  position: absolute;\\n  height: 6px;\\n  background-color: ', ';\\n  border-radius: 3px;\\n  &:hover {\\n    height: 8px;\\n    border-radius: 4px;\\n  }\\n  ', '\\n'], ['\\n  cursor: pointer;\\n  position: absolute;\\n  height: 6px;\\n  background-color: ', ';\\n  border-radius: 3px;\\n  &:hover {\\n    height: 8px;\\n    border-radius: 4px;\\n  }\\n  ', '\\n']);\n\nvar Container = styled.div(_templateObject$1);\nvar Line = styled.div(_templateObject2$1, function (props) {\n  return props.theme.scrollerBackgroundColor;\n});\nvar Position = styled.div(_templateObject3, function (props) {\n  return props.theme.mainColor;\n}, animationStyle);\n\nvar Scroller = function (_React$Component) {\n  inherits(Scroller, _React$Component);\n\n  function Scroller() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Scroller);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call.apply(_ref, [this].concat(args))), _this), _this.onMouseDown = function () {\n      _this.props.onDragStart();\n    }, _this.onMouseMove = function (e) {\n      var _this$props = _this.props,\n          scrolling = _this$props.scrolling,\n          onDrag = _this$props.onDrag;\n\n      if (scrolling && e.movementX) {\n        onDrag(e.movementX);\n      }\n    }, _this.onMouseUp = function () {\n      var _this$props2 = _this.props,\n          scrolling = _this$props2.scrolling,\n          onDragEnd = _this$props2.onDragEnd;\n\n      if (scrolling) {\n        onDragEnd();\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(Scroller, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          totalWidth = _props.totalWidth,\n          offset = _props.offset,\n          oldOffset = _props.oldOffset,\n          width = _props.width;\n\n      var getMargin = function getMargin(offset) {\n        return (totalWidth - (offset + width)) / totalWidth * 100;\n      };\n\n      var periodMargin = getMargin(oldOffset);\n      if (periodMargin < 0) return null;\n      var periodWidth = width * 100 / totalWidth;\n      var animationOffset = getMargin(offset) - periodMargin;\n      var positionStyle = {\n        width: periodWidth + '%',\n        marginLeft: periodMargin + '%'\n      };\n      return React.createElement(Container, null, React.createElement(Line, null), React.createElement(Position, {\n        offset: animationOffset * width / 100,\n        style: positionStyle,\n        onTouchStart: function onTouchStart(e) {\n          return e.preventDefault();\n        },\n        onDragStart: function onDragStart(e) {\n          return e.preventDefault();\n        },\n        onMouseDown: this.onMouseDown\n      }));\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps !== this.props;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      document.addEventListener('mouseup', this.onMouseUp);\n      document.addEventListener('mousemove', this.onMouseMove);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.removeEventListener('mouseup', this.onMouseUp);\n      document.removeEventListener('mousemove', this.onMouseMove);\n    }\n  }]);\n  return Scroller;\n}(React.Component);\n\nvar sum = function sum(arr) {\n  return arr.reduce(function (acc, value) {\n    return acc + value;\n  }, 0);\n};\n\nvar _templateObject$2 = taggedTemplateLiteral(['\\n  fill: ', ';\\n  font-size: ', 'px;\\n  pointer-events: none;\\n'], ['\\n  fill: ', ';\\n  font-size: ', 'px;\\n  pointer-events: none;\\n']);\n\nvar Text = styled.text(_templateObject$2, function (props) {\n  return props.theme.mainColor;\n}, function (props) {\n  return props.theme.labelFontSize;\n});\n\nvar Bar = function (_ref) {\n  var bar = _ref.bar,\n      index = _ref.index,\n      height = _ref.height,\n      barWidth = _ref.barWidth,\n      barSpace = _ref.barSpace,\n      centerBarIndex = _ref.centerBarIndex,\n      onBarSelect = _ref.onBarSelect,\n      highest = _ref.highest,\n      text = _ref.text,\n      startIndex = _ref.startIndex,\n      labelFontSize = _ref.labelFontSize;\n  var barTotalWidth = barWidth + barSpace;\n  var realIndex = index + startIndex;\n  var x = barTotalWidth * index + barSpace;\n\n  var valueToHeight = function valueToHeight(value) {\n    return value * height / highest;\n  };\n\n  var Subbar = function Subbar(_ref2) {\n    var valueBefore = _ref2.valueBefore,\n        value = _ref2.value,\n        color = _ref2.color;\n    var rectHeight = valueToHeight(value);\n    var y = height - valueToHeight(valueBefore) - rectHeight;\n    return React.createElement('rect', {\n      opacity: realIndex === centerBarIndex || !onBarSelect ? 1 : 0.6,\n      x: x,\n      y: y,\n      width: barWidth,\n      height: rectHeight,\n      fill: color\n    });\n  };\n\n  var BarText = function BarText() {\n    if (!text) return null;\n    var barHeight = sum(bar.map(function (b) {\n      return valueToHeight(b.value);\n    }));\n    var y = labelFontSize * 2 > barHeight ? height - labelFontSize : height - barHeight + labelFontSize;\n    return React.createElement(Text, {\n      width: barWidth,\n      x: x + barWidth / 2,\n      y: y,\n      dominantBaseline: 'middle',\n      textAnchor: 'middle'\n    }, text);\n  };\n\n  var Selectable = function Selectable() {\n    return React.createElement('rect', {\n      onTouchEnd: function onTouchEnd(e) {\n        onBarSelect(realIndex);\n        e.preventDefault();\n      },\n      onClick: function onClick() {\n        return onBarSelect(realIndex);\n      },\n      cursor: 'pointer',\n      x: x - barSpace / 2,\n      width: barTotalWidth,\n      y: 0,\n      height: height,\n      fill: 'transparent'\n    });\n  };\n\n  return React.createElement('g', null, bar.map(function (_ref3, index) {\n    var value = _ref3.value,\n        color = _ref3.color;\n    var valueBefore = sum(bar.slice(0, index).map(function (b) {\n      return b.value;\n    }));\n    var props = {\n      value: value,\n      color: color,\n      valueBefore: valueBefore,\n      key: index\n    };\n    return React.createElement(Subbar, props);\n  }), React.createElement(BarText, null), onBarSelect && React.createElement(Selectable, null));\n};\n\nvar _templateObject$3 = taggedTemplateLiteral(['\\n  font-size: ', 'px;\\n  font-weight: ', ';\\n  width: ', 'px;\\n  margin-left: ', 'px;\\n  text-align: center;\\n  color: ', ';\\n'], ['\\n  font-size: ', 'px;\\n  font-weight: ', ';\\n  width: ', 'px;\\n  margin-left: ', 'px;\\n  text-align: center;\\n  color: ', ';\\n']);\n\nvar Label = styled.p(_templateObject$3, function (props) {\n  return props.theme.labelFontSize * (props.selected ? 1.2 : 1);\n}, function (props) {\n  return props.selected ? 'bold' : undefined;\n}, function (props) {\n  return props.width;\n}, function (props) {\n  return props.space;\n}, function (props) {\n  return props.theme.mainColor;\n});\n\nvar _templateObject$4 = taggedTemplateLiteral(['\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  overflow: hidden;\\n'], ['\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  overflow: hidden;\\n']),\n    _templateObject2$2 = taggedTemplateLiteral(['\\n  height: 100%;\\n  position: absolute;\\n  display: flex;\\n  flex-direction: column;\\n  ', '\\n'], ['\\n  height: 100%;\\n  position: absolute;\\n  display: flex;\\n  flex-direction: column;\\n  ', '\\n']);\n\nvar Wrapper = styled.div(_templateObject$4);\nvar DataContainer = styled.div(_templateObject2$2, animationStyle);\n\nvar DataContainer$1 = function (_ref) {\n  var barTotalWidth = _ref.barTotalWidth,\n      width = _ref.width,\n      offset = _ref.offset,\n      oldOffset = _ref.oldOffset,\n      totalWidth = _ref.totalWidth,\n      startIndex = _ref.startIndex,\n      children = _ref.children;\n  var left = totalWidth < width ? (width - totalWidth) / 2 : width + oldOffset - totalWidth + startIndex * barTotalWidth;\n  var containerWidth = totalWidth - startIndex * barTotalWidth;\n  var animationOffset = offset - oldOffset;\n  var style = {\n    left: left,\n    width: containerWidth\n  };\n  return React.createElement(Wrapper, null, React.createElement(DataContainer, {\n    offset: animationOffset,\n    style: style\n  }, children));\n};\n\nvar _templateObject$5 = taggedTemplateLiteral(['\\n  height: 100%;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: column;\\n'], ['\\n  height: 100%;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: column;\\n']),\n    _templateObject2$3 = taggedTemplateLiteral(['\\n  height: 100%;\\n  width: 100%;\\n'], ['\\n  height: 100%;\\n  width: 100%;\\n']),\n    _templateObject3$1 = taggedTemplateLiteral(['\\n  height: 40px;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  display: flex;\\n  user-select: none;\\n'], ['\\n  height: 40px;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  display: flex;\\n  user-select: none;\\n']),\n    _templateObject4 = taggedTemplateLiteral(['\\n  width: 100%;\\n  height: 1px;\\n  background-color: ', ';\\n'], ['\\n  width: 100%;\\n  height: 1px;\\n  background-color: ', ';\\n']);\n\nvar RootContainer = styled.div(_templateObject$5);\nvar BarsView = styled.svg(_templateObject2$3);\nvar LabelsContainer = styled.div(_templateObject3$1);\nvar Line$1 = styled.div(_templateObject4, function (props) {\n  return props.theme.mainColor;\n});\n\nvar BarChart = function (_React$Component) {\n  inherits(BarChart, _React$Component);\n\n  function BarChart(props) {\n    classCallCheck(this, BarChart);\n\n    var _this = possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).call(this, props));\n\n    _this.onResize = function () {\n      var _this$rootContainer$g = _this.rootContainer.getBoundingClientRect(),\n          width = _this$rootContainer$g.width;\n\n      var _this$barsContainer$g = _this.barsContainer.getBoundingClientRect(),\n          height = _this$barsContainer$g.height;\n\n      _this.setState({\n        width: width,\n        height: height\n      });\n    };\n\n    _this.onScroll = function (movementX) {\n      var _this$state = _this.state,\n          width = _this$state.width,\n          offset = _this$state.offset,\n          totalWidth = _this$state.totalWidth;\n      var _this$props = _this.props,\n          barWidth = _this$props.barWidth,\n          barSpace = _this$props.barSpace,\n          bars = _this$props.bars,\n          selectCenterBarOnScroll = _this$props.selectCenterBarOnScroll,\n          centerBarIndex = _this$props.centerBarIndex,\n          onBarSelect = _this$props.onBarSelect;\n      var additionalOffset = totalWidth / width * movementX;\n\n      var getOffset = function getOffset() {\n        var newOffset = offset - additionalOffset;\n        if (newOffset < 0) return 0;\n        if (newOffset + width > totalWidth) return totalWidth - width;\n        return newOffset;\n      };\n\n      var newOffset = getOffset();\n\n      _this.setState({\n        offset: newOffset,\n        oldOffset: newOffset\n      });\n\n      if (selectCenterBarOnScroll) {\n        var center = totalWidth - newOffset - width / 2;\n        var newCenterBarIndex = bars.findIndex(function (_, index) {\n          return index * (barWidth + barSpace) >= center;\n        }) - 1;\n\n        if (centerBarIndex !== newCenterBarIndex) {\n          onBarSelect(newCenterBarIndex);\n        }\n      }\n    };\n\n    _this.state = {\n      oldOffset: 0,\n      offset: 0,\n      scrolling: false\n    };\n    return _this;\n  }\n\n  createClass(BarChart, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          theme = _props.theme,\n          bars = _props.bars,\n          barWidth = _props.barWidth,\n          barSpace = _props.barSpace,\n          onBarSelect = _props.onBarSelect,\n          centerBarIndex = _props.centerBarIndex,\n          _props$showScroll = _props.showScroll,\n          showScroll = _props$showScroll === undefined ? true : _props$showScroll;\n      var _state = this.state,\n          width = _state.width,\n          height = _state.height,\n          offset = _state.offset,\n          oldOffset = _state.oldOffset,\n          scrolling = _state.scrolling,\n          totalWidth = _state.totalWidth;\n      var barTotalWidth = barWidth + barSpace;\n\n      var getStartIndex = function getStartIndex() {\n        var startIndex = Math.floor((totalWidth - width - oldOffset - (offset > oldOffset ? offset - oldOffset : 0)) / barTotalWidth);\n        if (startIndex < 0) return 0;\n        return startIndex;\n      };\n\n      var startIndex = getStartIndex();\n      var lastIndex = Math.ceil((totalWidth - oldOffset + (offset < oldOffset ? oldOffset - offset : 0)) / barTotalWidth);\n      var slicedBars = bars.slice(startIndex, lastIndex);\n      var highest = bars.map(function (b) {\n        return b.items;\n      }).reduce(function (acc, bar) {\n        var height = sum(bar.map(function (b) {\n          return b.value;\n        }));\n        return height > acc ? height : acc;\n      }, 0);\n\n      var completeTheme = _extends({}, DEFAULT_THEME, theme);\n\n      var Content = function Content() {\n        if (!width) return null;\n\n        var Bars = function Bars() {\n          var barCommonProps = {\n            labelFontSize: completeTheme.labelFontSize,\n            startIndex: startIndex,\n            height: height,\n            barWidth: barWidth,\n            barSpace: barSpace,\n            centerBarIndex: centerBarIndex,\n            onBarSelect: onBarSelect,\n            highest: highest\n          };\n          if (!height) return null;\n          return slicedBars.map(function (_ref, index) {\n            var items = _ref.items,\n                text = _ref.text;\n            return React.createElement(Bar, _extends({}, barCommonProps, {\n              text: text,\n              bar: items,\n              index: index,\n              key: index\n            }));\n          });\n        };\n\n        var Labels = function Labels() {\n          var labels = slicedBars.map(function (b) {\n            return b.label;\n          });\n          if (labels.every(function (l) {\n            return !l;\n          })) return null;\n          return React.createElement(LabelsContainer, null, labels.map(function (label, index) {\n            return React.createElement(Label, {\n              width: barWidth,\n              space: barSpace,\n              selected: centerBarIndex === index + startIndex,\n              key: index + startIndex\n            }, label);\n          }));\n        };\n\n        var dataContainerProps = {\n          barTotalWidth: barTotalWidth,\n          width: width,\n          offset: offset,\n          oldOffset: oldOffset,\n          totalWidth: totalWidth,\n          startIndex: startIndex\n        };\n        var scrollerProps = {\n          totalWidth: totalWidth,\n          width: width,\n          offset: offset,\n          oldOffset: oldOffset,\n          scrolling: scrolling,\n          onDragStart: function onDragStart() {\n            return _this2.setState({\n              scrolling: true,\n              oldOffset: _this2.state.offset\n            });\n          },\n          onDrag: _this2.onScroll,\n          onDragEnd: function onDragEnd() {\n            return _this2.setState({\n              scrolling: false\n            });\n          }\n        };\n        return React.createElement(React.Fragment, null, React.createElement(DataContainer$1, dataContainerProps, React.createElement(BarsView, {\n          ref: function ref(el) {\n            return _this2.barsContainer = el;\n          }\n        }, React.createElement(Bars, null)), bars.length > 0 && React.createElement(Line$1, null), React.createElement(Labels, null)), showScroll && React.createElement(Scroller, scrollerProps));\n      };\n\n      return React.createElement(ThemeProvider, {\n        theme: completeTheme\n      }, React.createElement(RootContainer, {\n        ref: function ref(el) {\n          return _this2.rootContainer = el;\n        }\n      }, React.createElement(Content, null)));\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _barsContainer$getBou = this.barsContainer.getBoundingClientRect(),\n          height = _barsContainer$getBou.height;\n\n      if (this.state.height !== height) {\n        this.setState({\n          height: height\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('resize', this.onResize);\n\n      var _rootContainer$getBou = this.rootContainer.getBoundingClientRect(),\n          width = _rootContainer$getBou.width;\n\n      this.setState({\n        width: width\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var width = prevState.width,\n          offset = prevState.offset,\n          scrolling = prevState.scrolling;\n      if (!width) return null;\n      var centerBarIndex = nextProps.centerBarIndex,\n          barWidth = nextProps.barWidth,\n          barSpace = nextProps.barSpace,\n          bars = nextProps.bars;\n      var bar = barWidth + barSpace;\n      var totalWidth = bars.length * bar + barSpace;\n\n      var getNewOffsets = function getNewOffsets() {\n        if (centerBarIndex !== undefined && !scrolling) {\n          if (totalWidth < width) {\n            return {\n              oldOffset: 0,\n              offset: 0\n            };\n          }\n\n          var offsetToCenter = totalWidth - bar * centerBarIndex - (width + bar) / 2;\n\n          var getOffset = function getOffset() {\n            if (offsetToCenter < 0) return 0;\n            if (offsetToCenter + width > totalWidth) return totalWidth - width;\n            return offsetToCenter;\n          };\n\n          return {\n            offset: getOffset(),\n            oldOffset: offset\n          };\n        }\n      };\n\n      return _extends({}, prevState, getNewOffsets(), {\n        totalWidth: totalWidth\n      });\n    }\n  }]);\n  return BarChart;\n}(React.Component);\n\nexport { BarChart };","map":{"version":3,"sources":["../src/constants.js","../src/components/bar-chart/styles.js","../src/components/bar-chart/scroller.js","../src/utils.js","../src/components/bar-chart/bar.js","../src/components/bar-chart/label.js","../src/components/bar-chart/data-container.js","../src/components/bar-chart/index.js"],"names":["DEFAULT_THEME","barAnimation","keyframes","props","animationStyle","css","Container","styled","Scroller","React","Component","totalWidth","offset","oldOffset","width","getMargin","periodMargin","periodWidth","animationOffset","positionStyle","marginLeft","e","onMouseDown","nextProps","onMouseMove","scrolling","onDrag","onMouseUp","onDragEnd","sum","acc","bar","index","height","barWidth","barSpace","centerBarIndex","onBarSelect","highest","text","startIndex","labelFontSize","barTotalWidth","realIndex","x","valueToHeight","value","Subbar","valueBefore","color","rectHeight","y","BarText","barHeight","b","Selectable","key","Wrapper","DataContainer","children","left","containerWidth","style","RootContainer","BarsView","LabelsContainer","BarChart","theme","bars","showScroll","getStartIndex","Math","lastIndex","slicedBars","completeTheme","Content","Bars","barCommonProps","items","Labels","labels","dataContainerProps","scrollerProps","selectCenterBarOnScroll","additionalOffset","getOffset","newOffset","center","newCenterBarIndex","prevState","getNewOffsets","offsetToCenter"],"mappings":"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","sourcesContent":["export const DEFAULT_THEME = {\n  mainColor: 'white',\n  scrollerBackgroundColor: 'rgba(255, 255, 255, 0.15)',\n  labelFontSize: 12\n}","import { keyframes, css } from 'styled-components'\n\nconst barAnimation = (props) => keyframes`\n  to {\n    transform: translateX(${props.offset}px);\n  }\n`\n\nexport const animationStyle = css`\n  animation: ${barAnimation} 1s ease-in-out forwards;\n`","import React from 'react'\nimport styled from 'styled-components'\n\nimport { animationStyle } from './styles'\n\nconst Container = styled.div`\n  position: relative;\n  height: 20px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n`\n\nconst Line = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 6px;\n  background-color: ${props => props.theme.scrollerBackgroundColor};\n`\n\nconst Position = styled.div`\n  cursor: pointer;\n  position: absolute;\n  height: 6px;\n  background-color: ${props => props.theme.mainColor};\n  border-radius: 3px;\n  &:hover {\n    height: 8px;\n    border-radius: 4px;\n  }\n  ${animationStyle}\n`\n\nclass Scroller extends React.Component {\n  render() {\n    const { totalWidth, offset, oldOffset, width } = this.props\n    const getMargin = offset => ((totalWidth  - (offset + width)) / totalWidth) * 100\n    const periodMargin = getMargin(oldOffset)\n    if (periodMargin < 0) return null\n    \n    const periodWidth = (width * 100) / totalWidth\n    const animationOffset = getMargin(offset) - periodMargin\n    const positionStyle = { width: `${periodWidth}%`, marginLeft: `${periodMargin}%` }\n    return (\n      <Container>\n        <Line/>\n        <Position\n          offset={(animationOffset * width) / 100}\n          style={positionStyle}\n          onTouchStart={e => e.preventDefault()}\n          onDragStart={e => e.preventDefault()}\n          onMouseDown={this.onMouseDown}\n        />\n      </Container>\n    )\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps !== this.props\n  }\n\n  componentDidMount() {\n    document.addEventListener('mouseup', this.onMouseUp)\n    document.addEventListener('mousemove', this.onMouseMove)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp)\n    document.removeEventListener('mousemove', this.onMouseMove)\n  }\n\n  onMouseDown = () => {\n    this.props.onDragStart()\n  }\n\n  onMouseMove = e => {\n    const { scrolling, onDrag } = this.props\n    if (scrolling && e.movementX) {\n      onDrag(e.movementX)\n    }\n  }\n\n  onMouseUp = () => {\n    const { scrolling, onDragEnd } = this.props\n    if (scrolling) {\n      onDragEnd()\n    }\n  }\n}\n\nexport default Scroller","export const sum = arr => arr.reduce((acc, value) => acc + value, 0)","import React from 'react'\nimport styled from 'styled-components'\nimport { sum } from '../../utils'\n\nconst Text = styled.text`\n  fill: ${props => props.theme.mainColor};\n  font-size: ${props => props.theme.labelFontSize}px;\n  pointer-events: none;\n`\n\nexport default ({\n  bar,\n  index,\n  height,\n  barWidth,\n  barSpace,\n  centerBarIndex,\n  onBarSelect,\n  highest,\n  text,\n  startIndex,\n  labelFontSize\n}) => {\n  const barTotalWidth = barWidth + barSpace\n  const realIndex = index + startIndex\n  const x = barTotalWidth * index + barSpace\n  const valueToHeight = value => (value * height) / highest\n      \n  const Subbar = ({ valueBefore, value, color }) => {\n    const rectHeight = valueToHeight(value)\n    const y = height - valueToHeight(valueBefore) - rectHeight\n\n    return (\n      <rect\n        opacity={(realIndex === centerBarIndex) || !onBarSelect ? 1 : 0.6}\n        x={x}\n        y={y}\n        width={barWidth}\n        height={rectHeight}\n        fill={color}\n      />\n    )\n  }\n  const BarText = () => {\n    if (!text) return null\n    const barHeight = sum(bar.map(b => valueToHeight(b.value)))\n    const y = labelFontSize * 2 > barHeight ? height - labelFontSize : height - barHeight + labelFontSize\n    return (\n      <Text\n        width={barWidth}\n        x={x + barWidth / 2}\n        y={y}\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n      >{text}</Text>\n    )\n  }\n  const Selectable = () => (\n    <rect\n      onTouchEnd={(e) => {\n        onBarSelect(realIndex)\n        e.preventDefault()\n      }}\n      onClick={() => onBarSelect(realIndex)}\n      cursor={'pointer'}\n      x={x - barSpace / 2}\n      width={barTotalWidth}\n      y={0}\n      height={height}\n      fill={'transparent'}\n    />\n  )\n\n  return (\n    <g>\n      {bar.map(({ value, color }, index) => {\n        const valueBefore = sum(bar.slice(0, index).map(b => b.value))\n        const props = { value, color, valueBefore, key: index }\n        \n        return <Subbar {...props} />\n      })}\n      <BarText/>\n      {onBarSelect && <Selectable/>}\n    </g>\n  )\n}","import styled from 'styled-components'\n\nexport default styled.p`\n  font-size: ${props => props.theme.labelFontSize * (props.selected ? 1.2 : 1)}px;\n  font-weight: ${props => props.selected ? 'bold' : undefined};\n  width: ${props => props.width}px;\n  margin-left: ${props => props.space}px;\n  text-align: center;\n  color: ${props => props.theme.mainColor};\n`","import React from 'react'\nimport styled from 'styled-components'\nimport { animationStyle } from './styles'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n`\n\nconst DataContainer = styled.div`\n  height: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  ${animationStyle}\n`\n\nexport default ({ barTotalWidth, width, offset, oldOffset, totalWidth, startIndex, children }) => {\n  const left = totalWidth < width ? (width - totalWidth) / 2 : width + oldOffset - totalWidth + startIndex * barTotalWidth\n  const containerWidth = totalWidth - startIndex * barTotalWidth\n  const animationOffset = offset - oldOffset\n  const style = { left, width: containerWidth }\n\n  return (\n    <Wrapper>\n      <DataContainer offset={animationOffset} style={style}>\n        {children}\n      </DataContainer>\n    </Wrapper>\n  )\n}","import React from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\n\nimport { DEFAULT_THEME } from '../../constants'\nimport Scroller from './scroller'\nimport Bar from './bar'\nimport Label from './label'\nimport DataContainer from './data-container'\nimport { sum } from '../../utils'\n\nconst RootContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\n\nconst BarsView = styled.svg`\n  height: 100%;\n  width: 100%;\n`\n\nconst LabelsContainer = styled.div`\n  height: 40px;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  display: flex;\n  user-select: none;\n`\n\nconst Line = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${props => props.theme.mainColor};\n`\n\nexport default class BarChart extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      oldOffset: 0,\n      offset: 0,\n      scrolling: false\n    }\n  }\n\n  render() {\n    const {\n      theme,\n      bars,\n      barWidth,\n      barSpace,\n      onBarSelect,\n      centerBarIndex,\n      showScroll = true\n    } = this.props\n    const { width, height, offset, oldOffset, scrolling, totalWidth } = this.state\n    const barTotalWidth = barWidth + barSpace\n    const getStartIndex = () => {\n      const startIndex = Math.floor((totalWidth - width - oldOffset - (offset > oldOffset ? offset  - oldOffset : 0)) / barTotalWidth)\n      if (startIndex < 0) return 0\n  \n      return startIndex\n    }\n    const startIndex = getStartIndex()\n    const lastIndex = Math.ceil((totalWidth - oldOffset + (offset < oldOffset ? oldOffset - offset : 0)) / barTotalWidth)\n    const slicedBars = bars.slice(startIndex, lastIndex)\n    const highest = bars.map(b => b.items).reduce((acc, bar) => {\n      const height = sum(bar.map(b => b.value))\n      return height > acc ? height : acc\n    }, 0)\n    const completeTheme = { ...DEFAULT_THEME, ...theme }\n    const Content = () => {\n      if (!width) return null\n      const Bars = () => {\n        const barCommonProps = {\n          labelFontSize: completeTheme.labelFontSize,\n          startIndex,\n          height,\n          barWidth,\n          barSpace,\n          centerBarIndex,\n          onBarSelect,\n          highest\n        }\n        if (!height) return null\n        return slicedBars.map(({ items, text }, index) => (\n          <Bar\n            {...barCommonProps}\n            text={text}\n            bar={items}\n            index={index}\n            key={index}\n          />\n        ))\n      }\n      const Labels = () => {\n        const labels = slicedBars.map(b => b.label)\n        if (labels.every(l => !l)) return null\n        \n        return (\n          <LabelsContainer>\n            {labels.map((label, index) => (\n              <Label\n                width={barWidth}\n                space={barSpace}\n                selected={centerBarIndex === index + startIndex}\n                key={index + startIndex}\n              >\n                {label}\n              </Label>)\n            )}\n          </LabelsContainer>\n      )\n      }\n      const dataContainerProps = { barTotalWidth, width, offset, oldOffset, totalWidth, startIndex }\n      const scrollerProps = {\n        totalWidth,\n        width,\n        offset,\n        oldOffset,\n        scrolling,\n        onDragStart: () => this.setState({ scrolling: true, oldOffset: this.state.offset }),\n        onDrag: this.onScroll,\n        onDragEnd: () => this.setState({ scrolling: false })\n      }\n      return (\n        <React.Fragment>\n          <DataContainer {...dataContainerProps}>\n            <BarsView ref={el => this.barsContainer = el}>\n              <Bars/>\n            </BarsView>\n            {bars.length > 0 && <Line/>}\n            <Labels/>\n          </DataContainer>\n          {showScroll && <Scroller {...scrollerProps} />}\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <ThemeProvider theme={completeTheme}>\n        <RootContainer ref={el => this.rootContainer = el}>\n          <Content/>\n        </RootContainer>\n      </ThemeProvider>\n    )\n  }\n\n  componentDidUpdate() {\n    const { height } = this.barsContainer.getBoundingClientRect()\n    if (this.state.height !== height) {\n      this.setState({ height })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onResize)\n    const { width } = this.rootContainer.getBoundingClientRect()\n    this.setState({ width })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  onResize = () => {\n    const { width } = this.rootContainer.getBoundingClientRect()\n    const { height } = this.barsContainer.getBoundingClientRect()\n    this.setState({ width, height })\n  }\n\n  onScroll = (movementX) => {\n    const { width, offset, totalWidth } = this.state\n    const { barWidth, barSpace, bars, selectCenterBarOnScroll, centerBarIndex, onBarSelect } = this.props\n    const additionalOffset = (totalWidth / width) * movementX\n    const getOffset = () => {\n      const newOffset = offset - additionalOffset\n      if (newOffset < 0) return 0\n      if (newOffset + width > totalWidth) return totalWidth - width\n      return newOffset\n    }\n    const newOffset = getOffset()\n    this.setState({ offset: newOffset, oldOffset: newOffset })\n    if (selectCenterBarOnScroll) {\n      const center = totalWidth - newOffset - width / 2\n      const newCenterBarIndex = bars.findIndex((_, index) => ((index) * (barWidth + barSpace)) >= center) - 1\n      if (centerBarIndex !== newCenterBarIndex) {\n        onBarSelect(newCenterBarIndex)\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { width, offset, scrolling } = prevState\n    if (!width) return null\n\n    const { centerBarIndex, barWidth, barSpace, bars } = nextProps\n\n    const bar = barWidth + barSpace\n    const totalWidth = bars.length * bar + barSpace\n    const getNewOffsets = () => {\n      if (centerBarIndex !== undefined && !scrolling) {\n        if (totalWidth < width) {\n          return {\n            oldOffset: 0,\n            offset: 0\n          }\n        }\n        const offsetToCenter = totalWidth - bar * centerBarIndex - (width + bar) / 2\n        const getOffset = () => {\n          if (offsetToCenter < 0) return 0\n          if (offsetToCenter + width > totalWidth) return totalWidth - width\n          return offsetToCenter\n        }\n        return {\n          offset: getOffset(),\n          oldOffset: offset\n        }\n      }\n    }\n    return {\n      ...prevState,\n      ...getNewOffsets(),\n      totalWidth\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}