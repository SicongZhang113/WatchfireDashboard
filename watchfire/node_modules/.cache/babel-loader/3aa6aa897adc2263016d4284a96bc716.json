{"ast":null,"code":"var _jsxFileName = \"/Users/mengwang/WatchfireDashboard/v5/src/component/VisBarChart/BarChart.js\";\n// import React, { Component } from 'react'\n// import { withTheme } from '@material-ui/core/styles';\n// import { BarChart } from 'increaser-charts'\n// const bars = [\n//   {\n//     label: 'X8',\n//     text: '1000',\n//     items: [{\n//       value: 10,\n//       color: 'gold'\n//     }, {\n//       value: 5,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   }\n// ]\n// // optional\n// const theme = {\n//   mainColor: 'white',\n//   scrollerBackgroundColor: 'rgba(255, 255, 255, 0.15)',\n//   labelFontSize: 12\n// }\n// class VisBarChart extends Component {\n//   constructor(props) {\n//     super(props)\n//     const barsNumber = 60\n//     const barsWithLabels = true\n//     this.state = {\n//       centerBarIndex: undefined,\n//       barWidth: 35,\n//       barSpace: 8,\n//       barsNumber,\n//       barsWithLabels,\n//       bars,\n//       showScroll: true,\n//       selectCenterBarOnScroll: true\n//     }\n//   }\n//   render () {\n//     const {\n//       centerBarIndex,\n//       barWidth,\n//       barSpace,\n//       bars,\n//       selectCenterBarOnScroll,\n//       barsWithLabels,\n//       barsWithTexts,\n//       showScroll\n//     } = this.state\n//     return (\n//         <BarChart\n//           theme={theme}\n//           bars={bars}\n//           barWidth={barWidth}\n//           barSpace={barSpace}\n//           barsWithLabels={barsWithLabels}\n//           barsWithTexts={barsWithTexts}\n//           centerBarIndex={centerBarIndex}\n//           onBarSelect={(centerBarIndex) => this.setState({ centerBarIndex })}\n//           selectCenterBarOnScroll={selectCenterBarOnScroll}\n//           showScroll={showScroll}\n//         />\n//     )\n//   }\n// }\n// export default withTheme(VisBarChart);\nimport React from 'react';\nimport { ComposedChart, Line, XAxis, YAxis, Label, ResponsiveContainer, Tooltip, Legend, Area, BarChart, Bar } from 'recharts';\nimport Title from '../dashboard/Title';\nimport $ from \"jquery\";\nimport { withTheme } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass VisBarChart extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: this.createData(),\n      time: new Date(this.convertDate(\"2020-02-02\"))\n    };\n  }\n\n  createData() {\n    let data = [];\n    let i = 0;\n\n    for (i; i < 10; i++) {\n      data.push({\n        time: 0,\n        quantity: i,\n        firm_prediction: 0,\n        IBC_prediction: 0,\n        sd_interval: [10, 20]\n      });\n    }\n\n    return data;\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  convertDate(str) {\n    // console.log(str)\n    var date = new Date(str),\n        month = (\"0\" + (date.getUTCMonth() + 1)).slice(-2),\n        day = (\"0\" + date.getUTCDate()).slice(-2); // console.log(day);\n\n    return [date.getFullYear(), month, day].join(\"-\");\n  }\n\n  update() {\n    $.get(\"api/select_barchart\", data => {\n      this.setState({\n        data: data\n      });\n    });\n  }\n\n  render() {\n    function formatXAxis(str) {\n      // console.log(str)\n      var date = new Date(str),\n          month = (\"0\" + (date.getUTCMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getUTCDate()).slice(-2);\n      return [date.getFullYear(), month, day].join(\"-\");\n    }\n\n    const handleChange_time = date => {\n      var pick_time = this.convertDate(date);\n      console.log(pick_time);\n      $.ajax({\n        type: \"POST\",\n        url: \"api/select_barchart\",\n        data: {\n          time: pick_time\n        },\n        success: () => this.update(),\n        error: () => this.update()\n      });\n      this.setState({\n        time: date\n      });\n    };\n\n    return console.log(this.state.time), React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      selected: this.state.time,\n      onChange: handleChange_time,\n      dateFormat: \"MM/yyyy\",\n      showMonthYearPicker: true,\n      showFullMonthYearPicker: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Quantity vs. Model\"), React.createElement(ResponsiveContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(BarChart, {\n      margin: {\n        top: 16,\n        right: 16,\n        bottom: 0,\n        left: 34\n      },\n      data: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      dataKey: \"quantity\",\n      fill: \"#8884d8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withTheme(VisBarChart);","map":{"version":3,"sources":["/Users/mengwang/WatchfireDashboard/v5/src/component/VisBarChart/BarChart.js"],"names":["React","ComposedChart","Line","XAxis","YAxis","Label","ResponsiveContainer","Tooltip","Legend","Area","BarChart","Bar","Title","$","withTheme","FormControl","InputLabel","Select","DatePicker","VisBarChart","Component","constructor","state","data","createData","time","Date","convertDate","i","push","quantity","firm_prediction","IBC_prediction","sd_interval","componentDidMount","update","str","date","month","getUTCMonth","slice","day","getUTCDate","getFullYear","join","get","setState","render","formatXAxis","handleChange_time","pick_time","console","log","ajax","type","url","success","error","top","right","bottom","left"],"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","sourcesContent":["// import React, { Component } from 'react'\n\n// import { withTheme } from '@material-ui/core/styles';\n\n// import { BarChart } from 'increaser-charts'\n\n// const bars = [\n//   {\n//     label: 'X8',\n//     text: '1000',\n//     items: [{\n//       value: 10,\n//       color: 'gold'\n//     }, {\n//       value: 5,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   },\n//   {\n//     label: 'X10',\n//     text: 8,\n//     items: [{\n//       value: 8,\n//       color: 'black'\n//     }],\n//   }\n// ]\n\n// // optional\n// const theme = {\n//   mainColor: 'white',\n//   scrollerBackgroundColor: 'rgba(255, 255, 255, 0.15)',\n//   labelFontSize: 12\n// }\n\n// class VisBarChart extends Component {\n//   constructor(props) {\n//     super(props)\n//     const barsNumber = 60\n//     const barsWithLabels = true\n//     this.state = {\n//       centerBarIndex: undefined,\n//       barWidth: 35,\n//       barSpace: 8,\n//       barsNumber,\n//       barsWithLabels,\n//       bars,\n//       showScroll: true,\n//       selectCenterBarOnScroll: true\n//     }\n//   }\n//   render () {\n//     const {\n//       centerBarIndex,\n//       barWidth,\n//       barSpace,\n//       bars,\n//       selectCenterBarOnScroll,\n//       barsWithLabels,\n//       barsWithTexts,\n//       showScroll\n//     } = this.state\n//     return (\n//         <BarChart\n//           theme={theme}\n//           bars={bars}\n//           barWidth={barWidth}\n//           barSpace={barSpace}\n//           barsWithLabels={barsWithLabels}\n//           barsWithTexts={barsWithTexts}\n//           centerBarIndex={centerBarIndex}\n//           onBarSelect={(centerBarIndex) => this.setState({ centerBarIndex })}\n//           selectCenterBarOnScroll={selectCenterBarOnScroll}\n//           showScroll={showScroll}\n//         />\n//     )\n//   }\n// }\n\n// export default withTheme(VisBarChart);\n\nimport React from 'react';\nimport { ComposedChart, Line, XAxis, YAxis, Label, ResponsiveContainer, Tooltip, Legend, Area, BarChart, Bar } from 'recharts';\nimport Title from '../dashboard/Title';\nimport $ from \"jquery\";\nimport { withTheme } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass VisBarChart extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            data: this.createData(),\n            time: new Date(this.convertDate(\"2020-02-02\")),\n        }\n    }\n\n    createData() {\n        let data = []\n        let i = 0;\n        for( i ; i < 10; i++) {\n            data.push({ time:0, quantity:i, firm_prediction:0, IBC_prediction: 0, sd_interval:[10,20]})\n        }\n        return data;\n    }\n\n    componentDidMount() {\n        this.update()\n    }\n\n    convertDate(str) {\n        // console.log(str)\n        var date = new Date(str),\n            month = (\"0\" + (date.getUTCMonth() + 1)).slice(-2),\n            day = (\"0\" + (date.getUTCDate())).slice(-2);\n            // console.log(day);\n        return [date.getFullYear(), month, day].join(\"-\");\n    }\n\n\n    update() {\n        $.get(\"api/select_barchart\", (data) =>{\n            this.setState({\n                data: data,\n            })\n        });\n    }\n\n\n    render() {\n\n    function formatXAxis(str) {\n        // console.log(str)\n        var date = new Date(str),\n            month = (\"0\" + (date.getUTCMonth() + 1)).slice(-2),\n            day = (\"0\" + date.getUTCDate()).slice(-2);\n        return [date.getFullYear(), month, day].join(\"-\");\n    }\n    \n    const handleChange_time = date => {\n        var pick_time = this.convertDate(date);\n        console.log(pick_time)\n        $.ajax({\n            type: \"POST\",\n            url: \"api/select_barchart\",\n            data: {time: pick_time},\n            success: () => this.update(),\n            error: () => this.update()\n        });\n        this.setState({\n          time: date\n        });\n    };\n\n    return (\n    console.log(this.state.time),\n    <React.Fragment>\n        {/* <FormControl >\n        <InputLabel htmlFor=\"age-native-simple\">Model</InputLabel>\n        <Select\n          native\n          value={this.state.model}\n          onChange={handleChange_model}\n          inputProps={{\n            name: 'model',\n            id: 'age-native-simple',\n\n          }}\n        >\n            <option value={'2219'}>2219</option>\n            <option value={'W8'}>W8</option>\n            <option value={'W10'}>W10</option>\n            <option value={'W16'}>W16</option>\n            <option value={'W19'}>W19</option>\n            <option value={'X8'}>X8</option>\n            <option value={'X10'}>X10</option>\n            <option value={'X16'}>X16</option>\n            <option value={'X19'}>X19</option>\n        </Select>\n      </FormControl> */}\n\n      <DatePicker\n      selected={this.state.time}\n      onChange={handleChange_time}\n      dateFormat=\"MM/yyyy\"\n      showMonthYearPicker\n      showFullMonthYearPicker\n    />\n\n      <Title>Quantity vs. Model</Title>\n      <ResponsiveContainer>\n            <BarChart \n                margin={{\n                    top: 16,\n                    right: 16,\n                    bottom: 0,\n                    left: 34,\n                }} \n                data={this.state.data}\n            >\n                <Bar dataKey=\"quantity\" fill=\"#8884d8\" />\n            </BarChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n    )\n    }\n}\nexport default withTheme(VisBarChart);"]},"metadata":{},"sourceType":"module"}