'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var React = _interopDefault(require('react'));

var DEFAULT_THEME = {
  mainColor: 'white',
  scrollerBackgroundColor: 'rgba(255, 255, 255, 0.15)',
  labelFontSize: 12
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

var _templateObject = taggedTemplateLiteral(['\n  to {\n    transform: translateX(', 'px);\n  }\n'], ['\n  to {\n    transform: translateX(', 'px);\n  }\n']),
    _templateObject2 = taggedTemplateLiteral(['\n  animation: ', ' 1s ease-in-out forwards;\n'], ['\n  animation: ', ' 1s ease-in-out forwards;\n']);

var barAnimation = function barAnimation(props) {
  return styled.keyframes(_templateObject, props.offset);
};

var animationStyle = styled.css(_templateObject2, barAnimation);

var _templateObject$1 = taggedTemplateLiteral(['\n  position: relative;\n  height: 20px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n'], ['\n  position: relative;\n  height: 20px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n']),
    _templateObject2$1 = taggedTemplateLiteral(['\n  position: absolute;\n  width: 100%;\n  height: 6px;\n  background-color: ', ';\n'], ['\n  position: absolute;\n  width: 100%;\n  height: 6px;\n  background-color: ', ';\n']),
    _templateObject3 = taggedTemplateLiteral(['\n  cursor: pointer;\n  position: absolute;\n  height: 6px;\n  background-color: ', ';\n  border-radius: 3px;\n  &:hover {\n    height: 8px;\n    border-radius: 4px;\n  }\n  ', '\n'], ['\n  cursor: pointer;\n  position: absolute;\n  height: 6px;\n  background-color: ', ';\n  border-radius: 3px;\n  &:hover {\n    height: 8px;\n    border-radius: 4px;\n  }\n  ', '\n']);

var Container = styled__default.div(_templateObject$1);

var Line = styled__default.div(_templateObject2$1, function (props) {
  return props.theme.scrollerBackgroundColor;
});

var Position = styled__default.div(_templateObject3, function (props) {
  return props.theme.mainColor;
}, animationStyle);

var Scroller = function (_React$Component) {
  inherits(Scroller, _React$Component);

  function Scroller() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Scroller);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call.apply(_ref, [this].concat(args))), _this), _this.onMouseDown = function () {
      _this.props.onDragStart();
    }, _this.onMouseMove = function (e) {
      var _this$props = _this.props,
          scrolling = _this$props.scrolling,
          onDrag = _this$props.onDrag;

      if (scrolling && e.movementX) {
        onDrag(e.movementX);
      }
    }, _this.onMouseUp = function () {
      var _this$props2 = _this.props,
          scrolling = _this$props2.scrolling,
          onDragEnd = _this$props2.onDragEnd;

      if (scrolling) {
        onDragEnd();
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Scroller, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          totalWidth = _props.totalWidth,
          offset = _props.offset,
          oldOffset = _props.oldOffset,
          width = _props.width;

      var getMargin = function getMargin(offset) {
        return (totalWidth - (offset + width)) / totalWidth * 100;
      };
      var periodMargin = getMargin(oldOffset);
      if (periodMargin < 0) return null;

      var periodWidth = width * 100 / totalWidth;
      var animationOffset = getMargin(offset) - periodMargin;
      var positionStyle = { width: periodWidth + '%', marginLeft: periodMargin + '%' };
      return React.createElement(
        Container,
        null,
        React.createElement(Line, null),
        React.createElement(Position, {
          offset: animationOffset * width / 100,
          style: positionStyle,
          onTouchStart: function onTouchStart(e) {
            return e.preventDefault();
          },
          onDragStart: function onDragStart(e) {
            return e.preventDefault();
          },
          onMouseDown: this.onMouseDown
        })
      );
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('mouseup', this.onMouseUp);
      document.addEventListener('mousemove', this.onMouseMove);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('mouseup', this.onMouseUp);
      document.removeEventListener('mousemove', this.onMouseMove);
    }
  }]);
  return Scroller;
}(React.Component);

var sum = function sum(arr) {
  return arr.reduce(function (acc, value) {
    return acc + value;
  }, 0);
};

var _templateObject$2 = taggedTemplateLiteral(['\n  fill: ', ';\n  font-size: ', 'px;\n  pointer-events: none;\n'], ['\n  fill: ', ';\n  font-size: ', 'px;\n  pointer-events: none;\n']);

var Text = styled__default.text(_templateObject$2, function (props) {
  return props.theme.mainColor;
}, function (props) {
  return props.theme.labelFontSize;
});

var Bar = (function (_ref) {
  var bar = _ref.bar,
      index = _ref.index,
      height = _ref.height,
      barWidth = _ref.barWidth,
      barSpace = _ref.barSpace,
      centerBarIndex = _ref.centerBarIndex,
      onBarSelect = _ref.onBarSelect,
      highest = _ref.highest,
      text = _ref.text,
      startIndex = _ref.startIndex,
      labelFontSize = _ref.labelFontSize;

  var barTotalWidth = barWidth + barSpace;
  var realIndex = index + startIndex;
  var x = barTotalWidth * index + barSpace;
  var valueToHeight = function valueToHeight(value) {
    return value * height / highest;
  };

  var Subbar = function Subbar(_ref2) {
    var valueBefore = _ref2.valueBefore,
        value = _ref2.value,
        color = _ref2.color;

    var rectHeight = valueToHeight(value);
    var y = height - valueToHeight(valueBefore) - rectHeight;

    return React.createElement('rect', {
      opacity: realIndex === centerBarIndex || !onBarSelect ? 1 : 0.6,
      x: x,
      y: y,
      width: barWidth,
      height: rectHeight,
      fill: color
    });
  };
  var BarText = function BarText() {
    if (!text) return null;
    var barHeight = sum(bar.map(function (b) {
      return valueToHeight(b.value);
    }));
    var y = labelFontSize * 2 > barHeight ? height - labelFontSize : height - barHeight + labelFontSize;
    return React.createElement(
      Text,
      {
        width: barWidth,
        x: x + barWidth / 2,
        y: y,
        dominantBaseline: 'middle',
        textAnchor: 'middle'
      },
      text
    );
  };
  var Selectable = function Selectable() {
    return React.createElement('rect', {
      onTouchEnd: function onTouchEnd(e) {
        onBarSelect(realIndex);
        e.preventDefault();
      },
      onClick: function onClick() {
        return onBarSelect(realIndex);
      },
      cursor: 'pointer',
      x: x - barSpace / 2,
      width: barTotalWidth,
      y: 0,
      height: height,
      fill: 'transparent'
    });
  };

  return React.createElement(
    'g',
    null,
    bar.map(function (_ref3, index) {
      var value = _ref3.value,
          color = _ref3.color;

      var valueBefore = sum(bar.slice(0, index).map(function (b) {
        return b.value;
      }));
      var props = { value: value, color: color, valueBefore: valueBefore, key: index };

      return React.createElement(Subbar, props);
    }),
    React.createElement(BarText, null),
    onBarSelect && React.createElement(Selectable, null)
  );
});

var _templateObject$3 = taggedTemplateLiteral(['\n  font-size: ', 'px;\n  font-weight: ', ';\n  width: ', 'px;\n  margin-left: ', 'px;\n  text-align: center;\n  color: ', ';\n'], ['\n  font-size: ', 'px;\n  font-weight: ', ';\n  width: ', 'px;\n  margin-left: ', 'px;\n  text-align: center;\n  color: ', ';\n']);

var Label = styled__default.p(_templateObject$3, function (props) {
  return props.theme.labelFontSize * (props.selected ? 1.2 : 1);
}, function (props) {
  return props.selected ? 'bold' : undefined;
}, function (props) {
  return props.width;
}, function (props) {
  return props.space;
}, function (props) {
  return props.theme.mainColor;
});

var _templateObject$4 = taggedTemplateLiteral(['\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n'], ['\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n']),
    _templateObject2$2 = taggedTemplateLiteral(['\n  height: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  ', '\n'], ['\n  height: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  ', '\n']);

var Wrapper = styled__default.div(_templateObject$4);

var DataContainer = styled__default.div(_templateObject2$2, animationStyle);

var DataContainer$1 = (function (_ref) {
  var barTotalWidth = _ref.barTotalWidth,
      width = _ref.width,
      offset = _ref.offset,
      oldOffset = _ref.oldOffset,
      totalWidth = _ref.totalWidth,
      startIndex = _ref.startIndex,
      children = _ref.children;

  var left = totalWidth < width ? (width - totalWidth) / 2 : width + oldOffset - totalWidth + startIndex * barTotalWidth;
  var containerWidth = totalWidth - startIndex * barTotalWidth;
  var animationOffset = offset - oldOffset;
  var style = { left: left, width: containerWidth };

  return React.createElement(
    Wrapper,
    null,
    React.createElement(
      DataContainer,
      { offset: animationOffset, style: style },
      children
    )
  );
});

var _templateObject$5 = taggedTemplateLiteral(['\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n'], ['\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n']),
    _templateObject2$3 = taggedTemplateLiteral(['\n  height: 100%;\n  width: 100%;\n'], ['\n  height: 100%;\n  width: 100%;\n']),
    _templateObject3$1 = taggedTemplateLiteral(['\n  height: 40px;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  display: flex;\n  user-select: none;\n'], ['\n  height: 40px;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  display: flex;\n  user-select: none;\n']),
    _templateObject4 = taggedTemplateLiteral(['\n  width: 100%;\n  height: 1px;\n  background-color: ', ';\n'], ['\n  width: 100%;\n  height: 1px;\n  background-color: ', ';\n']);

var RootContainer = styled__default.div(_templateObject$5);

var BarsView = styled__default.svg(_templateObject2$3);

var LabelsContainer = styled__default.div(_templateObject3$1);

var Line$1 = styled__default.div(_templateObject4, function (props) {
  return props.theme.mainColor;
});

var BarChart = function (_React$Component) {
  inherits(BarChart, _React$Component);

  function BarChart(props) {
    classCallCheck(this, BarChart);

    var _this = possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).call(this, props));

    _this.onResize = function () {
      var _this$rootContainer$g = _this.rootContainer.getBoundingClientRect(),
          width = _this$rootContainer$g.width;

      var _this$barsContainer$g = _this.barsContainer.getBoundingClientRect(),
          height = _this$barsContainer$g.height;

      _this.setState({ width: width, height: height });
    };

    _this.onScroll = function (movementX) {
      var _this$state = _this.state,
          width = _this$state.width,
          offset = _this$state.offset,
          totalWidth = _this$state.totalWidth;
      var _this$props = _this.props,
          barWidth = _this$props.barWidth,
          barSpace = _this$props.barSpace,
          bars = _this$props.bars,
          selectCenterBarOnScroll = _this$props.selectCenterBarOnScroll,
          centerBarIndex = _this$props.centerBarIndex,
          onBarSelect = _this$props.onBarSelect;

      var additionalOffset = totalWidth / width * movementX;
      var getOffset = function getOffset() {
        var newOffset = offset - additionalOffset;
        if (newOffset < 0) return 0;
        if (newOffset + width > totalWidth) return totalWidth - width;
        return newOffset;
      };
      var newOffset = getOffset();
      _this.setState({ offset: newOffset, oldOffset: newOffset });
      if (selectCenterBarOnScroll) {
        var center = totalWidth - newOffset - width / 2;
        var newCenterBarIndex = bars.findIndex(function (_, index) {
          return index * (barWidth + barSpace) >= center;
        }) - 1;
        if (centerBarIndex !== newCenterBarIndex) {
          onBarSelect(newCenterBarIndex);
        }
      }
    };

    _this.state = {
      oldOffset: 0,
      offset: 0,
      scrolling: false
    };
    return _this;
  }

  createClass(BarChart, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          theme = _props.theme,
          bars = _props.bars,
          barWidth = _props.barWidth,
          barSpace = _props.barSpace,
          onBarSelect = _props.onBarSelect,
          centerBarIndex = _props.centerBarIndex,
          _props$showScroll = _props.showScroll,
          showScroll = _props$showScroll === undefined ? true : _props$showScroll;
      var _state = this.state,
          width = _state.width,
          height = _state.height,
          offset = _state.offset,
          oldOffset = _state.oldOffset,
          scrolling = _state.scrolling,
          totalWidth = _state.totalWidth;

      var barTotalWidth = barWidth + barSpace;
      var getStartIndex = function getStartIndex() {
        var startIndex = Math.floor((totalWidth - width - oldOffset - (offset > oldOffset ? offset - oldOffset : 0)) / barTotalWidth);
        if (startIndex < 0) return 0;

        return startIndex;
      };
      var startIndex = getStartIndex();
      var lastIndex = Math.ceil((totalWidth - oldOffset + (offset < oldOffset ? oldOffset - offset : 0)) / barTotalWidth);
      var slicedBars = bars.slice(startIndex, lastIndex);
      var highest = bars.map(function (b) {
        return b.items;
      }).reduce(function (acc, bar) {
        var height = sum(bar.map(function (b) {
          return b.value;
        }));
        return height > acc ? height : acc;
      }, 0);
      var completeTheme = _extends({}, DEFAULT_THEME, theme);
      var Content = function Content() {
        if (!width) return null;
        var Bars = function Bars() {
          var barCommonProps = {
            labelFontSize: completeTheme.labelFontSize,
            startIndex: startIndex,
            height: height,
            barWidth: barWidth,
            barSpace: barSpace,
            centerBarIndex: centerBarIndex,
            onBarSelect: onBarSelect,
            highest: highest
          };
          if (!height) return null;
          return slicedBars.map(function (_ref, index) {
            var items = _ref.items,
                text = _ref.text;
            return React.createElement(Bar, _extends({}, barCommonProps, {
              text: text,
              bar: items,
              index: index,
              key: index
            }));
          });
        };
        var Labels = function Labels() {
          var labels = slicedBars.map(function (b) {
            return b.label;
          });
          if (labels.every(function (l) {
            return !l;
          })) return null;

          return React.createElement(
            LabelsContainer,
            null,
            labels.map(function (label, index) {
              return React.createElement(
                Label,
                {
                  width: barWidth,
                  space: barSpace,
                  selected: centerBarIndex === index + startIndex,
                  key: index + startIndex
                },
                label
              );
            })
          );
        };
        var dataContainerProps = { barTotalWidth: barTotalWidth, width: width, offset: offset, oldOffset: oldOffset, totalWidth: totalWidth, startIndex: startIndex };
        var scrollerProps = {
          totalWidth: totalWidth,
          width: width,
          offset: offset,
          oldOffset: oldOffset,
          scrolling: scrolling,
          onDragStart: function onDragStart() {
            return _this2.setState({ scrolling: true, oldOffset: _this2.state.offset });
          },
          onDrag: _this2.onScroll,
          onDragEnd: function onDragEnd() {
            return _this2.setState({ scrolling: false });
          }
        };
        return React.createElement(
          React.Fragment,
          null,
          React.createElement(
            DataContainer$1,
            dataContainerProps,
            React.createElement(
              BarsView,
              { ref: function ref(el) {
                  return _this2.barsContainer = el;
                } },
              React.createElement(Bars, null)
            ),
            bars.length > 0 && React.createElement(Line$1, null),
            React.createElement(Labels, null)
          ),
          showScroll && React.createElement(Scroller, scrollerProps)
        );
      };

      return React.createElement(
        styled.ThemeProvider,
        { theme: completeTheme },
        React.createElement(
          RootContainer,
          { ref: function ref(el) {
              return _this2.rootContainer = el;
            } },
          React.createElement(Content, null)
        )
      );
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _barsContainer$getBou = this.barsContainer.getBoundingClientRect(),
          height = _barsContainer$getBou.height;

      if (this.state.height !== height) {
        this.setState({ height: height });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.onResize);

      var _rootContainer$getBou = this.rootContainer.getBoundingClientRect(),
          width = _rootContainer$getBou.width;

      this.setState({ width: width });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.onResize);
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var width = prevState.width,
          offset = prevState.offset,
          scrolling = prevState.scrolling;

      if (!width) return null;

      var centerBarIndex = nextProps.centerBarIndex,
          barWidth = nextProps.barWidth,
          barSpace = nextProps.barSpace,
          bars = nextProps.bars;


      var bar = barWidth + barSpace;
      var totalWidth = bars.length * bar + barSpace;
      var getNewOffsets = function getNewOffsets() {
        if (centerBarIndex !== undefined && !scrolling) {
          if (totalWidth < width) {
            return {
              oldOffset: 0,
              offset: 0
            };
          }
          var offsetToCenter = totalWidth - bar * centerBarIndex - (width + bar) / 2;
          var getOffset = function getOffset() {
            if (offsetToCenter < 0) return 0;
            if (offsetToCenter + width > totalWidth) return totalWidth - width;
            return offsetToCenter;
          };
          return {
            offset: getOffset(),
            oldOffset: offset
          };
        }
      };
      return _extends({}, prevState, getNewOffsets(), {
        totalWidth: totalWidth
      });
    }
  }]);
  return BarChart;
}(React.Component);

exports.BarChart = BarChart;
//# sourceMappingURL=index.js.map
